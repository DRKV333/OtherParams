@using PacketDocs.Yaml;
@using RazorBlade
@using System;
@using System.Linq;
@using System.Text;

@inherits HtmlTemplate<PacketFormatDocument>

@functions {
    private static readonly string[] BranchColors = new[]
    {
        "table-info",
        "table-warning",
        "table-danger",
        "table-success"
    };

    private void MakeFieldsTable(FieldsList fields)
    {
        int maxBranchDepth = MaxBranchDepth(fields);

        <table class="table mb-5">
            <thead>
                <tr>
                    <th scope="col" colspan="@(maxBranchDepth + 1)">Type</th>
                    <th scope="col">Name</th>
                    <th scope="col">Description</th>
                </tr>
            </thead>
            <tbody>
                @{ MakeFieldsTableRows(fields, maxBranchDepth, 0); }
            </tbody>
        </table>
    }

    private void MakeFieldsTableRows(FieldsList fields, int maxBranchDepth, int currentBranchDepth)
    {
        foreach (IFieldItem item in fields.Fields)
        {
            MakeFieldsTableRow(item, maxBranchDepth, currentBranchDepth);
        }
    }

    private void MakeFieldsTableRow(IFieldItem fieldItem, int maxBranchDepth, int currentBranchDepth)
    {
        if (fieldItem is Field field)
        {
            <tr>
                @{ MakeBranchPaddingColumns(currentBranchDepth); }
                <td colspan="@(maxBranchDepth - currentBranchDepth + 1)">@TypeText(field.Type)</td>
                <td>@field.Name</td>
                <td>TODO</td>
            </tr>
        }
        else if (fieldItem is Branch branch)
        {
            string conditionText;
            if (branch.Details.TestEqual != null)
                conditionText = $"{branch.Details.Field} = {branch.Details.TestEqual}";
            else if (branch.Details.TestFlag != null)
                conditionText = $"{branch.Details.Field} & {branch.Details.TestFlag}";
            else
                conditionText = branch.Details.Field;

            MakeFullSpanRow(maxBranchDepth, currentBranchDepth, branch.Details.IsTrue != null ? $"if ({conditionText})" : $"if not ({conditionText})");

            if (branch.Details.IsTrue != null)
                MakeFieldsTableRows(branch.Details.IsTrue, maxBranchDepth, currentBranchDepth + 1);

            if (branch.Details.IsTrue != null && branch.Details.IsFalse != null)
                MakeFullSpanRow(maxBranchDepth, currentBranchDepth, "else");

            if (branch.Details.IsFalse != null)
                MakeFieldsTableRows(branch.Details.IsFalse, maxBranchDepth, currentBranchDepth + 1);

            MakeFullSpanRow(maxBranchDepth, currentBranchDepth, "endif");
        }
    }

    private void MakeFullSpanRow(int maxBranchDepth, int currentBranchDepth, string content)
    {
        <tr class="@BranchColor(currentBranchDepth)">
            @{ MakeBranchPaddingColumns(currentBranchDepth); }
            <th scope="row" colspan="@(maxBranchDepth + 3)">@content</th>
        </tr>
    }

    private void MakeBranchPaddingColumns(int currentBranchDepth)
    {
        for (int i = 0; i < currentBranchDepth; i++)
        {
            <td class="@BranchColor(i) w-0"></td>
        }
    }

    private static string BranchColor(int depth) => BranchColors[depth % BranchColors.Length];

    private static int MaxBranchDepth(FieldsList? fields)
    {
        if (fields == null)
            return 0;

        int depth = 0;
        foreach (IFieldItem item in fields.Fields)
        {
            if (item is Branch branch)
            {
                int innerDepth = Math.Max(MaxBranchDepth(branch.Details.IsTrue), MaxBranchDepth(branch.Details.IsFalse));
                depth = Math.Max(depth, innerDepth + 1);
            }
        }

        return depth;
    }

    private string TypeText(IFieldType type) => type switch
    {
        PrimitiveFieldType primitive => primitive.Value,
        LimitedStringFieldType limited => $"{limited.Name}(\u2264{limited.Maxlen})",
        ArrayFieldType array => $"{array.Type}[{array.Len}]",
        EnumFieldType anEnum => anEnum.Name, // TODO
        _ => "?"
    };

    private static string BreakCamelCase(string str)
    {
        if (str.Length == 0)
            return str;    

        StringBuilder builder = new();
        builder.Append(str[0]);
        for (int i = 1; i < str.Length; i++)
        {
            if (char.IsLower(str[i - 1]) && char.IsUpper(str[i]))
                builder.Append('\u200B');
            builder.Append(str[i]);
        }

        return builder.ToString();
    }
}

@{
    var packets = Model.Packets.OrderBy(x => x.Key).ToList();
    var structures = Model.Structures.OrderBy(x => x.Key).ToList();
}

<!DOCTYPE html>
<html lang="en" data-bs-theme="auto">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Packet Format Reference</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
        <link async rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.min.css" integrity="sha256-SD4b9urSXVSzdFbPDlHqAiDZ3gPva6Ki2MPzSkvDTBc=" crossorigin="anonymous">
        <script async src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
        <style>
            .fab {
                width: 56px;
                height: 56px;
            }

            .gr-grid {
                display: grid;
                grid-template-columns: 2fr 7fr 3fr;
                grid-template-rows: auto 1fr auto;
                grid-template-areas:
                    'h h h'
                    'n c t'
                    'f c t';
            }

            .gr-header {
                grid-area: h;
            }

            .gr-content {
                grid-area: c;
            }

            .gr-toc {
                grid-area: t;
            }

            .gr-nav {
                grid-area: n;
            }

            .gr-footer {
                grid-area: f;
            }

            @@media (max-width: 992px) {
                .gr-grid {
                    grid-template-columns: 0px 9fr 3fr;
                }
            }

            @@media (max-width: 768px) {
                .gr-grid {
                    grid-template-columns: 0px 12fr 0px;
                }
            }

            .w-0 {
                width: 0;
            }
        </style>
        <script>
            "use strict";
            document.addEventListener("DOMContentLoaded", e => {
                const attrBsTheme = 'data-bs-theme';
                const isDark = window.matchMedia?.('(prefers-color-scheme: dark)').matches;
                document.querySelectorAll(`[${attrBsTheme}="auto"]`).forEach(elem => elem.setAttribute(attrBsTheme, isDark ? 'dark' : 'light'));

                const main = document.getElementById('main');
                document.querySelectorAll('#nav a[data-bs-toggle="pill"]').forEach(elem => {
                    elem.addEventListener('shown.bs.tab', show => bootstrap.ScrollSpy.getInstance(main).refresh());
                });
            });
        </script>
    </head>
    <body>
        <button type="button" data-bs-toggle="offcanvas" data-bs-target="#toc"
                class="fab position-absolute bottom-0 end-0 m-3 p-3 text-center d-md-none rounded-circle btn btn-primary opacity-75">
            <i class="bi bi-list"></i>
        </button>
        <div class="vh-100 gr-grid">
            <header class="gr-header navbar navbar-expand-lg bg-body-secondary">
                <div class="container-fluid">
                    <button type="button" class="navbar-toggler" data-bs-toggle="offcanvas" data-bs-target="#nav">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="navbar-brand">Packet Format Reference</div>
                </div>
            </header>
            <nav id="nav" class="gr-nav p-3 overflow-y-auto bg-body-tertiary offcanvas-lg offcanvas-start">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title">Navigation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" data-bs-target="#nav" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <div class="nav nav-pills flex-column flex-nowrap">
                        <a class="nav-link active" data-bs-toggle="pill" data-bs-target="#pane-packets">Packets</a>
                        <a class="nav-link" data-bs-toggle="pill" data-bs-target="#pane-structures">Structures</a>
                        <hr class="d-lg-none" />
                        <a class="nav-link d-lg-none" href="https://github.com/DRKV333/OtherParams">
                            <i class="bi bi-github"></i>
                            OtherParams
                        </a>
                        <a class="nav-link d-lg-none" href="https://github.com/AnotherlandServer/packet-formats">
                            <i class="bi bi-file-earmark-code-fill"></i>
                            packet-formats
                        </a>
                    </div>
                </div>
            </nav>
            <nav id="toc" class="gr-toc p-3 overflow-y-auto overflow-x-hidden offcanvas-md offcanvas-bottom">
                <div class="tab-content">
                    <div id="toc-packets" class="tab-pane fade show active">
                        <div class="list-group">
                            @foreach (var item in packets)
                            {
                                <a class="list-group-item list-group-item-action" href="#packet-@item.Key.ToLower()">@BreakCamelCase(item.Key)</a>
                            }
                        </div>
                    </div>
                    <div id="toc-structures" class="tab-pane fade">
                        <div class="list-group">
                            @foreach (var item in structures)
                            {
                                <a class="list-group-item list-group-item-action" href="#structure-@item.Key.ToLower()">@BreakCamelCase(item.Key)</a>
                            }
                        </div>
                    </div>
                </div>
            </nav>
            <main id="main" class="gr-content p-3 overflow-y-auto" data-bs-spy="scroll" data-bs-target="#toc" data-bs-smooth-scroll="true" tabindex="0">
                <div class="tab-content">
                    <div id="pane-packets" class="tab-pane fade show active" data-bs-target="#toc-packets">
                        @foreach (var item in packets)
                        {
                            <div id="packet-@item.Key.ToLower()">
                                <h1>@item.Key</h1>
                                <ul class="list-inline">
                                    <li class="list-inline-item"><strong>ID: </strong><span class="font-monospace">0x@(item.Value.Id.ToString("X2"))</span></li>
                                    <li class="list-inline-item"><strong>SubID: </strong><span class="font-monospace">0x@(item.Value.SubId.ToString("X2"))</span></li>
                                    @if (item.Value.Inherit != null)
                                    {
                                        <li class="list-inline-item"><strong>Inherits: </strong>@item.Value.Inherit</li> 
                                    }
                                    </ul>
                                @{ MakeFieldsTable(item.Value); }
                            </div>
                        }
                    </div>
                    <div id="pane-structures" class="tab-pane fade" data-bs-target="#toc-structures">
                        @foreach (var item in structures)
                        {
                            <div id="structure-@item.Key.ToLower()">
                                <h1>@item.Key</h1>
                                @{ MakeFieldsTable(item.Value); }
                            </div>
                        }
                    </div>
                </div>
            </main>
            <footer class="gr-footer navbar d-none d-lg-flex bg-body-secondary">
                <div class="container-fluid">
                    <div class="navbar-brand">
                        <a class="link-body-emphasis link-underline-opacity-0" href="https://github.com/DRKV333/OtherParams">
                            <i class="bi bi-github"></i>
                        </a>
                        <a class="link-body-emphasis link-underline-opacity-0" href="https://github.com/AnotherlandServer/packet-formats">
                            <i class="bi bi-file-earmark-code-fill"></i>
                        </a>
                    </div>
                </div>
            </footer>
        </div>
    </body>
</html>